# BUILD SERVER
- name: Configure build server
  hosts: n4
  become: true
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Java
      apt:
        name: openjdk-11-jdk
        state: present

    - name: Install Maven
      apt:
        name: maven
        state: present

# NEXUS SERVER
- name: Deploy and Configure Nexus
  hosts: n5
  become: yes
  tasks:
    - name: Gather facts
      ansible.builtin.setup:

    - name: Create Nexus user
      ansible.builtin.user:
        name: nexus
        state: present

    - name: Download Nexus
      ansible.builtin.get_url:
        url: "https://download.sonatype.com/nexus/professional-bundle/nexus-professional-2.15.1-02-bundle.tar.gz"
        dest: /tmp/nexus.tar.gz
      register: download_result

    - name: Extract Nexus
      ansible.builtin.unarchive:
        src: /tmp/nexus.tar.gz
        dest: /opt/
        remote_src: yes
      register: extract_result

    - name: Remove old symbolic link if it exists
      ansible.builtin.file:
        path: /opt/nexus
        state: absent
      when: extract_result.changed

    - name: Create symbolic link to Nexus
      ansible.builtin.file:
        src: /opt/nexus-professional-2.15.1-02  # Ensure this matches the actual extracted directory name
        dest: /opt/nexus
        state: link
      when: extract_result.changed

    - name: Ensure nexus user owns the Nexus directory
      ansible.builtin.file:
        path: "/opt/nexus"
        owner: nexus
        group: nexus
        recurse: yes
      when:
        - extract_result.changed
        - ansible_facts['ansible_os_family'] == "Debian"  # Only apply this if the OS family is Debian/Ubuntu; adjust if needed

    - name: Set Nexus as a service
      ansible.builtin.template:
        src: nexus.service.j2
        dest: /etc/systemd/system/nexus.service
      notify: Reload systemd
    
    - name: Check Nexus service status
      ansible.builtin.command:
        cmd: systemctl status nexus.service
      register: nexus_service_status
      failed_when: false

    - name: Debug Nexus service status
      ansible.builtin.debug:
        var: nexus_service_status.stdout

    - name: Fetch Nexus service logs
      ansible.builtin.command:
        cmd: journalctl -xeu nexus.service
      register: nexus_service_logs
      failed_when: false

    - name: Debug Nexus service logs
      ansible.builtin.debug:
        var: nexus_service_logs.stdout

    - name: Check if Nexus directory exists
      ansible.builtin.stat:
        path: /opt/nexus
      register: nexus_dir_stat

    - name: Debug Nexus directory status
      ansible.builtin.debug:
        var: nexus_dir_stat

    - name: Check if Nexus binary exists
      ansible.builtin.stat:
        path: /opt/nexus/bin/nexus
      register: nexus_bin_stat

    - name: Debug Nexus binary status
      ansible.builtin.debug:
        var: nexus_bin_stat

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Start Nexus service
      ansible.builtin.systemd:
        name: nexus
        state: started
        enabled: yes
      register: nexus_service_status

    - name: Check Nexus service status
      ansible.builtin.command:
        cmd: systemctl status nexus.service
      register: nexus_status
      failed_when: nexus_status.rc != 0
      ignore_errors: yes

    - name: Fetch Nexus service logs
      ansible.builtin.command:
        cmd: journalctl -xeu nexus.service
      register: nexus_logs
      failed_when: nexus_logs.rc != 0
      ignore_errors: yes

    - name: Debug Nexus service status
      ansible.builtin.debug:
        msg: "{{ nexus_status.stdout }}"

    - name: Debug Nexus service logs
      ansible.builtin.debug:
        msg: "{{ nexus_logs.stdout }}"

  handlers:
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

# DEPLOY SERVERS
- name: Configure deploy servers
  hosts: deploy
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Java JDK
      apt:
        name: openjdk-11-jdk
        state: present

    - name: Download Apache Tomcat
      get_url:
        url: https://downloads.apache.org/tomcat/tomcat-9/v9.0.74/bin/apache-tomcat-9.0.74.tar.gz
        dest: /opt/tomcat.tar.gz

    - name: Extract Apache Tomcat
      unarchive:
        src: /opt/tomcat.tar.gz
        dest: /opt
        remote_src: yes

    - name: Create symbolic link for Tomcat
      file:
        src: /opt/apache-tomcat-9.0.74
        dest: /opt/tomcat
        state: link

    - name: Create Tomcat user and set ownership
      user:
        name: tomcat
        state: present
        shell: /bin/false

    - name: Set ownership for Tomcat
      file:
        path: /opt/tomcat
        state: directory
        owner: tomcat
        group: tomcat
        recurse: yes

    - name: Start Tomcat service
      shell: "/opt/tomcat/bin/startup.sh"
      args:
        chdir: /opt/tomcat/
